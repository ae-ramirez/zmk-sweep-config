
  /*
  * Copyright (c) 2020 The ZMK Contributors
  *
  * SPDX-License-Identifier: MIT
  */

  #include <behaviors.dtsi>
  #include <dt-bindings/zmk/keys.h>
  #include <dt-bindings/zmk/bt.h>
  #include <dt-bindings/zmk/ext_power.h>
  #include <dt-bindings/zmk/mouse.h>

  #define MAIN 0    // colemak-dh
  #define GAME 1    // kind of qwerty for games
  #define NUM_S 2   // num + symbols
  #define MED_S 3   // media + symbols
  #define MOUSE 4   // mouse
  #define FUN 5     // function
  #define EXT 6     // extend
  #define WM 7      // window manager

  #define MOVE_UP1 MOVE_VERT(-1200)
  #define MOVE_DOWN1 MOVE_VERT(1200)
  #define MOVE_LEFT1 MOVE_HOR(-1200)
  #define MOVE_RIGHT1 MOVE_HOR(1200)

  / {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&mo NUM_S>, <&mo MED_S>;
        };
    };

    keymap {
      compatible = "zmk,keymap";

        // main layer, colemak
        colemakdh {
          bindings = <
          &kp Q &kp W &kp F &kp P &kp B     &kp J &kp L &kp U &kp Y &kp SEMICOLON
          &kp A &kp R &kp S &kp T &kp G     &kp M &kp N &kp E &kp I &kp O
          &kp Z &kp X &kp C &kp D &kp V     &kp K &kp H &kp BACKSPACE &kp COMMA &kp DOT
              &kp LEFT_CONTROL &kp LEFT_SHIFT   &lt EXT SPACE &td0
          >;
        };

        game {
          bindings = <
          &kp B      &kp Q  &kp W  &kp E  &kp R     &kp J  &kp L  &kp U          &kp Y      &kp SEMICOLON
          &kp LCTRL  &kp A  &kp S  &kp D  &kp F     &kp M  &kp N  &kp E          &kp I      &kp O
          &kp TAB    &kp Z  &kp X  &kp C  &kp V     &kp K  &kp H  &kp BACKSPACE  &kp COMMA  &kp DOT
                             &kp SPACE &kp LSHFT   &lt EXT SPACE &td0
          >;
        };

        // numbers and symbols
        num_symb {
          bindings = <
          &kp EXCL &kp AT &kp POUND &kp DLLR &kp PRCNT      &kp PLUS &kp N7 &kp N8 &kp N9 &kp STAR
          &kp UNDER &kp LBRC &kp LPAR &kp LBKT &kp SQT      &kp N0 &kp N1 &kp N2 &kp N3 &kp MINUS
          &kp QMARK &kp RBRC &kp RPAR &kp RBKT &kp DQT      &kp EQUAL &kp N4 &kp N5 &kp N6 &kp SLASH
                  &trans &trans      &trans &trans

          >;
        };

        // media and more symbols
        media_symb {
          bindings = <
          &kp K_MUTE  &kp K_VOL_DN  &kp K_STOP2  &kp K_VOL_UP  &trans        &trans  &trans    &trans     &trans     &trans
          &trans      &kp K_PREV    &kp K_PP     &kp K_NEXT    &trans        &trans  &kp BSLH  &kp TILDE  &kp GRAVE  &trans
          &trans      &kp C_BRI_DN  &trans       &kp C_BRI_UP  &trans        &trans  &kp PIPE  &trans     &trans     &trans
                                                        &trans &trans       &trans &trans
          >;
        };

        // mouse layer
        mouse {
          bindings = <
          &trans &mkp MB4 &mwh SCROLL_UP &mkp MB5 &trans        &trans &trans &mmv MOVE_UP1 &trans &trans
          &trans &mkp RCLK &mwh SCROLL_DOWN &mkp LCLK &trans  &trans &mmv MOVE_LEFT1 &mmv MOVE_DOWN1 &mmv MOVE_RIGHT1 &trans
          &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans
                                      &tog MOUSE &trans             &trans &trans

          >;
        };

        // function keys, screenshot shortcuts, and some bluetooth stuff
        function {
          bindings = <
          &bt BT_CLR  &trans        &trans        &trans        &trans        &kp LC(LS(PSCRN))  &kp F7  &kp F8  &kp F9  &kp F10
          &trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans        &kp PSCRN          &kp F1  &kp F2  &kp F3  &kp F11
          &trans      &trans        &trans        &trans        &trans        &kp LS(PSCRN)      &kp F4  &kp F5  &kp F6  &kp F12
                                                         &trans &trans       &trans &trans
          >;
        };

        // main modifiers and arrow keys
        extend {
            bindings = <
            &kp ESC  &trans &trans  &trans  &trans                     &kp PG_UP  &kp HOME &kp UP &kp END &trans
            &kp TAB &sk LGUI  &sk LALT  &kp ENTER  &kp LCTRL           &kp PG_DN &kp LEFT  &kp DOWN  &kp RIGHT &trans
            &kp LC(Z)  &kp LC(X) &kp LC(C) &kp CAPS   &kp LC(V)        &sl FUN &trans &kp DEL &trans  &trans
                                &kp LEFT_CONTROL &kp LEFT_SHIFT       &lt EXT SPACE &td0
            >;
        };

        // TODO
        // window manager layer
        win_man{
          bindings = <
          &trans &kp LC(LS(LG(LEFT))) &kp LG(TAB) &kp LC(LS(LG(RIGHT))) &trans     &trans &kp LG(KP_N7) &kp LG(UP) &kp LG(KP_N9) &trans
          &trans &kp LC(LG(LEFT)) &kp LA(TAB) &kp LC(LG(RIGHT)) &trans         &trans  &kp LG(LEFT) &kp LC(LG(UP)) &kp LG(RIGHT) &trans
          &trans &trans &trans &trans &kp LG(RS(Q))          &kp LC(LG(DOWN)) &kp LG(KP_N1) &kp LG(DOWN) &kp LG(KP_N3) &trans
                                              &trans &trans           &trans &trans

          >;
        };

    };
  };

/ {
    combos {
        compatible = "zmk,combos";

        combo_wm {
            timeout-ms = <80>;
            key-positions = <30 33>;
            bindings = <&sl WM>;
        };

        combo_mouse_mode {
            timeout-ms = <80>;
            key-positions = <16 33>;
            bindings = <&tog MOUSE>;
        };

        combo_game_mode {
            timeout-ms = <150>;
            key-positions = <2 3 6 7>;
            layers = <MAIN GAME>;
            bindings = <&tog GAME>;
        };

    };
};
